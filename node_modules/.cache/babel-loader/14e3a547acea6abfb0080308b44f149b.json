{"ast":null,"code":"var axios = require('axios');\n\nvar MockAdapter = require('axios-mock-adapter');\n\nvar mock = new MockAdapter(axios);\nmock.onGet('/tickets').reply(200, {\n  tickets: [{\n    id: 1,\n    dateFrom: '2019-03-25',\n    dateTo: '2019-03-27',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Belarus',\n    toCountry: 'Germany',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 2,\n    dateFrom: '2019-03-28',\n    dateTo: '2019-03-30',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Germany',\n    toCountry: 'Belarus',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 3,\n    dateFrom: '2019-03-31',\n    dateTo: '2019-04-02',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Germany',\n    toCountry: 'Netherlands',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 4,\n    dateFrom: '2019-04-02',\n    dateTo: '2019-04-05',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Netherlands',\n    toCountry: 'Germany',\n    price: '125',\n    planeId: 1\n  }]\n});\nmock.onPost('/search-request').reply(function () {\n  return axios.get('/tickets');\n});\nmock.onGet('/best_deals').reply(200, {\n  bestdeals: [{\n    id: 1,\n    dateFrom: '2019-03-25',\n    dateTo: '2019-03-27',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Minsk, BLR',\n    toCountry: 'Riga, LV',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 2,\n    dateFrom: '2019-03-28',\n    dateTo: '2019-03-30',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Kiev, UA',\n    toCountry: 'Warsaw, PL',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 3,\n    dateFrom: '2019-03-31',\n    dateTo: '2019-04-02',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Moscow, RUS',\n    toCountry: 'Vilnius, LT',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 4,\n    dateFrom: '2019-04-02',\n    dateTo: '2019-04-05',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Minsk, BLR',\n    toCountry: 'Kiev, UA',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 4,\n    dateFrom: '2019-04-02',\n    dateTo: '2019-04-05',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Kiev, UA',\n    toCountry: 'Tallinn, EE',\n    price: '125',\n    planeId: 1\n  }, {\n    id: 4,\n    dateFrom: '2019-04-02',\n    dateTo: '2019-04-05',\n    startTime: '6.30',\n    endTime: '8.45',\n    fromCountry: 'Warsaw, PL',\n    toCountry: 'Amsterdam, NLD',\n    price: '125',\n    planeId: 1\n  }]\n}); //добавитб свободные места, места, (эконом/бизнес классы)\n\nmock.onPost('/search_bestdeals').reply(function () {\n  return axios.get('/best_deals');\n});\nmock.onGet('/airports').reply(200, {\n  airports: [{\n    name: 'Belarus'\n  }, {\n    name: 'Germany'\n  }, {\n    name: 'Netherlands'\n  }, {\n    name: 'Poland'\n  }, {\n    name: 'Ukrain'\n  }, {\n    name: 'Litva'\n  }, {\n    name: 'Latvia'\n  }, {\n    name: 'Estonia'\n  }, {\n    name: 'Russia'\n  }]\n}); // добавить название аэропортов\n\nmock.onGet('/planes').reply(200, [{\n  rows: 15,\n  location: [1, 1, 1, 0, 1, 1, 1]\n}, {\n  rows: 15,\n  location: [1, 1, 0, 1, 1, 0, 1, 1]\n}, {\n  rows: 15,\n  location: [1, 0, 1, 1, 1, 0, 1]\n}]);\nmock.onGet('/luggage-types').reply(200, {\n  luggage: [{\n    \"kg\": \"10\",\n    \"price\": \"9\"\n  }, {\n    \"kg\": \"20\",\n    \"price\": \"15\"\n  }, {\n    \"kg\": \"30\",\n    \"price\": \"21\"\n  }, {\n    \"kg\": \"free carry-on bag\",\n    \"price\": \"0\"\n  }]\n});\nexport default axios;","map":{"version":3,"sources":["D:\\Front-end\\Front-end\\src\\data\\index.js"],"names":["axios","require","MockAdapter","mock","onGet","reply","tickets","id","dateFrom","dateTo","startTime","endTime","fromCountry","toCountry","price","planeId","onPost","get","bestdeals","airports","name","rows","location","luggage"],"mappings":"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","sourcesContent":["const axios = require('axios');\nconst MockAdapter = require('axios-mock-adapter');\n\nconst mock = new MockAdapter(axios);\n\nmock.onGet('/tickets').reply(200, {\n  tickets: [\n    {\n      id: 1,\n      dateFrom: '2019-03-25',\n      dateTo: '2019-03-27',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Belarus',\n      toCountry: 'Germany',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 2,\n      dateFrom: '2019-03-28',\n      dateTo: '2019-03-30',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Germany',\n      toCountry: 'Belarus',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 3,\n      dateFrom: '2019-03-31',\n      dateTo: '2019-04-02',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Germany',\n      toCountry: 'Netherlands',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 4,\n      dateFrom: '2019-04-02',\n      dateTo: '2019-04-05',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Netherlands',\n      toCountry: 'Germany',\n      price: '125',\n      planeId: 1,\n    }\n  ],\n});\n\nmock.onPost('/search-request').reply(() => axios.get('/tickets'));\n\nmock.onGet('/best_deals').reply(200, {\n  bestdeals: [\n    {\n      id: 1,\n      dateFrom: '2019-03-25',\n      dateTo: '2019-03-27',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Minsk, BLR',\n      toCountry: 'Riga, LV',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 2,\n      dateFrom: '2019-03-28',\n      dateTo: '2019-03-30',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Kiev, UA',\n      toCountry: 'Warsaw, PL',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 3,\n      dateFrom: '2019-03-31',\n      dateTo: '2019-04-02',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Moscow, RUS',\n      toCountry: 'Vilnius, LT',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 4,\n      dateFrom: '2019-04-02',\n      dateTo: '2019-04-05',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Minsk, BLR',\n      toCountry: 'Kiev, UA',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 4,\n      dateFrom: '2019-04-02',\n      dateTo: '2019-04-05',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Kiev, UA',\n      toCountry: 'Tallinn, EE',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: 4,\n      dateFrom: '2019-04-02',\n      dateTo: '2019-04-05',\n      startTime: '6.30',\n      endTime: '8.45',\n      fromCountry: 'Warsaw, PL',\n      toCountry: 'Amsterdam, NLD',\n      price: '125',\n      planeId: 1,\n    },\n  ],\n});\n\n//добавитб свободные места, места, (эконом/бизнес классы)\n\nmock.onPost('/search_bestdeals').reply(() => axios.get('/best_deals'));\n\nmock.onGet('/airports').reply(200, {\n  airports: [{ name: 'Belarus' },\n    { name: 'Germany' },\n    { name: 'Netherlands' },\n    { name: 'Poland' },\n    { name: 'Ukrain' },\n    { name: 'Litva' },\n    { name: 'Latvia' },\n    { name: 'Estonia' },\n    { name: 'Russia' },\n  ],\n});\n// добавить название аэропортов\n\nmock.onGet('/planes').reply(200, [\n  {\n    rows: 15,\n    location: [1, 1, 1, 0, 1, 1, 1],\n  },\n  {\n    rows: 15,\n    location: [1, 1, 0, 1, 1, 0, 1, 1],\n  },\n  {\n    rows: 15,\n    location: [1, 0, 1, 1, 1, 0, 1],\n  },\n]);\n\nmock.onGet('/luggage-types').reply(200, {\n  luggage: [\n    {\n      \"kg\": \"10\",\n      \"price\": \"9\"\n    },\n    {\n      \"kg\": \"20\",\n      \"price\": \"15\"\n    },\n    {\n      \"kg\": \"30\",\n      \"price\": \"21\"\n    },\n    {\n      \"kg\": \"free carry-on bag\",\n      \"price\": \"0\"\n    }\n  ]\n})\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}