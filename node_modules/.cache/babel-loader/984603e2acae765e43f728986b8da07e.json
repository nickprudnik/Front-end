{"ast":null,"code":"var axios = require('axios');\n\nvar MockAdapter = require('axios-mock-adapter');\n\nvar mock = new MockAdapter(axios);\nmock.onGet('/tickets').reply(200, {\n  tickets: [{\n    id: Math.random(),\n    date: '16, FEB',\n    startTime: '6.30',\n    endTime: '8.45',\n    price: '125',\n    planeId: 1\n  }, {\n    id: Math.random(),\n    date: '16, FEB',\n    startTime: '13.35',\n    endTime: '15.50',\n    price: '150',\n    planeId: 2\n  }, {\n    id: Math.random(),\n    date: '16, FEB',\n    startTime: '16.40',\n    endTime: '18.55',\n    price: '115',\n    planeId: 3\n  }]\n});\nmock.onPost('/search-request').reply(function () {\n  return axios.get('/tickets');\n});\nmock.onGet('/airports').reply(200, {\n  airports: [{\n    name: 'Afghanistan'\n  }, {\n    name: 'Belarus'\n  }, {\n    name: 'Netherlands'\n  }, {\n    name: 'Poland'\n  }, {\n    name: 'Ukrain'\n  }, {\n    name: 'Litva'\n  }, {\n    name: 'Latvia'\n  }, {\n    name: 'Estonia'\n  }, {\n    name: 'Russia'\n  }]\n});\nmock.onGet('/planes').reply(200, [{\n  rows: 15,\n  location: [1, 1, 1, 0, 1, 1, 1]\n}, {\n  rows: 15,\n  location: [1, 1, 0, 1, 1, 0, 1, 1]\n}, {\n  rows: 15,\n  location: [1, 0, 1, 1, 1, 0, 1]\n}]);\nexport default axios;","map":{"version":3,"sources":["D:\\Front-end\\Front-end\\src\\data\\index.js"],"names":["axios","require","MockAdapter","mock","onGet","reply","tickets","id","Math","random","date","startTime","endTime","price","planeId","onPost","get","airports","name","rows","location"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,oBAAD,CAA3B;;AAEA,IAAME,IAAI,GAAG,IAAID,WAAJ,CAAgBF,KAAhB,CAAb;AAEAG,IAAI,CAACC,KAAL,CAAW,UAAX,EAAuBC,KAAvB,CAA6B,GAA7B,EAAkC;AAChCC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADN;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,SAAS,EAAE,MAHb;AAIEC,IAAAA,OAAO,EAAE,MAJX;AAKEC,IAAAA,KAAK,EAAE,KALT;AAMEC,IAAAA,OAAO,EAAE;AANX,GADO,EASP;AACEP,IAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADN;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,SAAS,EAAE,OAHb;AAIEC,IAAAA,OAAO,EAAE,OAJX;AAKEC,IAAAA,KAAK,EAAE,KALT;AAMEC,IAAAA,OAAO,EAAE;AANX,GATO,EAiBP;AACEP,IAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,EADN;AAEEC,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,SAAS,EAAE,OAHb;AAIEC,IAAAA,OAAO,EAAE,OAJX;AAKEC,IAAAA,KAAK,EAAE,KALT;AAMEC,IAAAA,OAAO,EAAE;AANX,GAjBO;AADuB,CAAlC;AA6BAX,IAAI,CAACY,MAAL,CAAY,iBAAZ,EAA+BV,KAA/B,CAAqC;AAAA,SAAML,KAAK,CAACgB,GAAN,CAAU,UAAV,CAAN;AAAA,CAArC;AAEAb,IAAI,CAACC,KAAL,CAAW,WAAX,EAAwBC,KAAxB,CAA8B,GAA9B,EAAmC;AACjCY,EAAAA,QAAQ,EAAE,CAAC;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAD,EACR;AAAEA,IAAAA,IAAI,EAAE;AAAR,GADQ,EAER;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFQ,EAGR;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAHQ,EAIR;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAJQ,EAKR;AAAEA,IAAAA,IAAI,EAAE;AAAR,GALQ,EAMR;AAAEA,IAAAA,IAAI,EAAE;AAAR,GANQ,EAOR;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAPQ,EAQR;AAAEA,IAAAA,IAAI,EAAE;AAAR,GARQ;AADuB,CAAnC;AAaAf,IAAI,CAACC,KAAL,CAAW,SAAX,EAAsBC,KAAtB,CAA4B,GAA5B,EAAiC,CAC/B;AACEc,EAAAA,IAAI,EAAE,EADR;AAEEC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AAFZ,CAD+B,EAK/B;AACED,EAAAA,IAAI,EAAE,EADR;AAEEC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB;AAFZ,CAL+B,EAS/B;AACED,EAAAA,IAAI,EAAE,EADR;AAEEC,EAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AAFZ,CAT+B,CAAjC;AAeA,eAAepB,KAAf","sourcesContent":["const axios = require('axios');\nconst MockAdapter = require('axios-mock-adapter');\n\nconst mock = new MockAdapter(axios);\n\nmock.onGet('/tickets').reply(200, {\n  tickets: [\n    {\n      id: Math.random(),\n      date: '16, FEB',\n      startTime: '6.30',\n      endTime: '8.45',\n      price: '125',\n      planeId: 1,\n    },\n    {\n      id: Math.random(),\n      date: '16, FEB',\n      startTime: '13.35',\n      endTime: '15.50',\n      price: '150',\n      planeId: 2,\n    },\n    {\n      id: Math.random(),\n      date: '16, FEB',\n      startTime: '16.40',\n      endTime: '18.55',\n      price: '115',\n      planeId: 3,\n    },\n  ],\n});\n\nmock.onPost('/search-request').reply(() => axios.get('/tickets'));\n\nmock.onGet('/airports').reply(200, {\n  airports: [{ name: 'Afghanistan' },\n    { name: 'Belarus' },\n    { name: 'Netherlands' },\n    { name: 'Poland' },\n    { name: 'Ukrain' },\n    { name: 'Litva' },\n    { name: 'Latvia' },\n    { name: 'Estonia' },\n    { name: 'Russia' },\n  ],\n});\n\nmock.onGet('/planes').reply(200, [\n  {\n    rows: 15,\n    location: [1, 1, 1, 0, 1, 1, 1],\n  },\n  {\n    rows: 15,\n    location: [1, 1, 0, 1, 1, 0, 1, 1],\n  },\n  {\n    rows: 15,\n    location: [1, 0, 1, 1, 1, 0, 1],\n  },\n]);\n\nexport default axios;\n"]},"metadata":{},"sourceType":"module"}