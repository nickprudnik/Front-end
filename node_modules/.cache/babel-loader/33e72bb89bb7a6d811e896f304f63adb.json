{"ast":null,"code":"//      \nvar insert = function insert(_ref, state, _ref2) {\n  var name = _ref[0],\n      index = _ref[1],\n      value = _ref[2];\n  var changeValue = _ref2.changeValue;\n  changeValue(state, name, function (array) {\n    var copy = [].concat(array || []);\n    copy.splice(index, 0, value);\n    return copy;\n  });\n};\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} //      \n\n\nvar move = function move(_ref, state, _ref2) {\n  var name = _ref[0],\n      from = _ref[1],\n      to = _ref[2];\n  var changeValue = _ref2.changeValue;\n\n  if (from === to) {\n    return;\n  }\n\n  changeValue(state, name, function (array) {\n    var copy = [].concat(array || []);\n    var value = copy[from];\n    copy.splice(from, 1);\n    copy.splice(to, 0, value);\n    return copy;\n  });\n  var fromPrefix = name + \"[\" + from + \"]\";\n  Object.keys(state.fields).forEach(function (key) {\n    if (key.substring(0, fromPrefix.length) === fromPrefix) {\n      var suffix = key.substring(fromPrefix.length);\n      var fromKey = fromPrefix + suffix;\n      var backup = state.fields[fromKey];\n\n      if (from < to) {\n        // moving to a higher index\n        // decrement all indices between from and to\n        for (var i = from; i < to; i++) {\n          var destKey = name + \"[\" + i + \"]\" + suffix;\n          moveFieldState({\n            destKey: destKey,\n            source: state.fields[name + \"[\" + (i + 1) + \"]\" + suffix]\n          });\n        }\n      } else {\n        // moving to a lower index\n        // increment all indices between to and from\n        for (var _i = from; _i > to; _i--) {\n          var _destKey = name + \"[\" + _i + \"]\" + suffix;\n\n          moveFieldState({\n            destKey: _destKey,\n            source: state.fields[name + \"[\" + (_i - 1) + \"]\" + suffix]\n          });\n        }\n      }\n\n      var toKey = name + \"[\" + to + \"]\" + suffix;\n      moveFieldState({\n        destKey: toKey,\n        source: backup\n      });\n    }\n  });\n\n  function moveFieldState(_ref3) {\n    var destKey = _ref3.destKey,\n        source = _ref3.source;\n    state.fields[destKey] = _extends({}, source, {\n      name: destKey,\n      change: state.fields[destKey].change,\n      // prevent functions from being overwritten\n      blur: state.fields[destKey].blur,\n      focus: state.fields[destKey].focus,\n      lastFieldState: undefined // clearing lastFieldState forces renotification\n\n    });\n  }\n}; //      \n\n\nvar pop = function pop(_ref, state, _ref2) {\n  var name = _ref[0];\n  var changeValue = _ref2.changeValue;\n  var result;\n  changeValue(state, name, function (array) {\n    if (array) {\n      if (!array.length) {\n        return [];\n      }\n\n      result = array[array.length - 1];\n      return array.slice(0, array.length - 1);\n    }\n  });\n  return result;\n}; //      \n\n\nvar push = function push(_ref, state, _ref2) {\n  var name = _ref[0],\n      value = _ref[1];\n  var changeValue = _ref2.changeValue;\n  changeValue(state, name, function (array) {\n    return array ? [].concat(array, [value]) : [value];\n  });\n}; //      \n\n\nvar remove = function remove(_ref, state, _ref2) {\n  var name = _ref[0],\n      index = _ref[1];\n  var changeValue = _ref2.changeValue;\n  var returnValue;\n  changeValue(state, name, function (array) {\n    var copy = [].concat(array || []);\n    returnValue = copy[index];\n    copy.splice(index, 1);\n    return copy;\n  });\n  return returnValue;\n}; //      \n\n\nvar shift = function shift(_ref, state, _ref2) {\n  var name = _ref[0];\n  var changeValue = _ref2.changeValue;\n  var result;\n  changeValue(state, name, function (array) {\n    if (array) {\n      if (!array.length) {\n        return [];\n      }\n\n      result = array[0];\n      return array.slice(1, array.length);\n    }\n  });\n  return result;\n}; //      \n\n\nvar swap = function swap(_ref, state, _ref2) {\n  var name = _ref[0],\n      indexA = _ref[1],\n      indexB = _ref[2];\n  var changeValue = _ref2.changeValue;\n\n  if (indexA === indexB) {\n    return;\n  }\n\n  changeValue(state, name, function (array) {\n    var copy = [].concat(array || []);\n    var a = copy[indexA];\n    copy[indexA] = copy[indexB];\n    copy[indexB] = a;\n    return copy;\n  }); // swap all field state that begin with \"name[indexA]\" with that under \"name[indexB]\"\n\n  var aPrefix = name + \"[\" + indexA + \"]\";\n  var bPrefix = name + \"[\" + indexB + \"]\";\n  Object.keys(state.fields).forEach(function (key) {\n    if (key.substring(0, aPrefix.length) === aPrefix) {\n      var suffix = key.substring(aPrefix.length);\n      var aKey = aPrefix + suffix;\n      var bKey = bPrefix + suffix;\n      var fieldA = state.fields[aKey];\n      moveFieldState({\n        destKey: aKey,\n        source: state.fields[bKey]\n      });\n      moveFieldState({\n        destKey: bKey,\n        source: fieldA\n      });\n    }\n  });\n\n  function moveFieldState(_ref3) {\n    var destKey = _ref3.destKey,\n        source = _ref3.source;\n    state.fields[destKey] = _extends({}, source, {\n      name: destKey,\n      change: state.fields[destKey].change,\n      // prevent functions from being overwritten\n      blur: state.fields[destKey].blur,\n      focus: state.fields[destKey].focus,\n      lastFieldState: undefined // clearing lastFieldState forces renotification\n\n    });\n  }\n}; //      \n\n\nvar unshift = function unshift(_ref, state, _ref2) {\n  var name = _ref[0],\n      value = _ref[1];\n  var changeValue = _ref2.changeValue;\n  changeValue(state, name, function (array) {\n    return array ? [value].concat(array) : [value];\n  });\n}; //      \n\n\nvar update = function update(_ref, state, _ref2) {\n  var name = _ref[0],\n      index = _ref[1],\n      value = _ref[2];\n  var changeValue = _ref2.changeValue;\n  changeValue(state, name, function (array) {\n    var copy = [].concat(array || []);\n    copy.splice(index, 1, value);\n    return copy;\n  });\n}; //      \n\n\nvar mutators = {\n  insert: insert,\n  move: move,\n  pop: pop,\n  push: push,\n  remove: remove,\n  shift: shift,\n  swap: swap,\n  unshift: unshift,\n  update: update\n};\nexport default mutators;","map":null,"metadata":{},"sourceType":"module"}