{"ast":null,"code":"import _defineProperty from \"D:\\\\Front-end\\\\Front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\Front-end\\\\Front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _handleActions;\n\nimport { handleActions } from 'redux-actions';\nimport { TICKETS_IS_LOADING, TICKETS_HAS_ERRORED, TICKETS_FETCH_DATA_SUCCESS } from '../actionTypes';\nvar initialState = {\n  hasErrored: false,\n  isLoading: false,\n  items: []\n};\n\nfunction ticketState() {\n  return {\n    hasErrored: false,\n    isLoading: false,\n    items: []\n  };\n}\n\nexport default function tickets() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TICKETS_HAS_ERRORED:\n      return _objectSpread({}, state, {\n        hasErrores: action.hasErrored\n      });\n\n    case TICKETS_IS_LOADING:\n      return _objectSpread({}, state, {\n        isLoading: action.isLoading\n      });\n\n    case TICKETS_FETCH_DATA_SUCCESS:\n      return _objectSpread({}, state, {\n        items: action.items\n      });\n\n    default:\n      return state;\n  }\n}\nvar tickets = handleActions((_handleActions = {}, _defineProperty(_handleActions, TICKETS_HAS_ERRORED, function (state, action) {\n  return _objectSpread({}, state, {\n    hasErrores: action.hasErrored\n  });\n}), _defineProperty(_handleActions, TICKETS_IS_LOADING, function (state, action) {\n  return _objectSpread({}, state, {\n    isLoading: action.isLoading\n  });\n}), _defineProperty(_handleActions, TICKETS_FETCH_DATA_SUCCESS, function (state, action) {\n  return _objectSpread({}, state, {\n    items: action.items\n  });\n}), _handleActions), airState());","map":{"version":3,"sources":["D:\\Front-end\\Front-end\\src\\redux\\search\\tickets\\reducers.js"],"names":["handleActions","TICKETS_IS_LOADING","TICKETS_HAS_ERRORED","TICKETS_FETCH_DATA_SUCCESS","initialState","hasErrored","isLoading","items","ticketState","tickets","state","action","type","hasErrores","airState"],"mappings":";;;;;AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,0BAAlD,QAAoF,gBAApF;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,SAASC,WAAT,GAAwB;AACtB,SAAO;AACLH,IAAAA,UAAU,EAAE,KADP;AAELC,IAAAA,SAAS,EAAE,KAFN;AAGLC,IAAAA,KAAK,EAAE;AAHF,GAAP;AAKD;;AAED,eAAe,SAASE,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBN,YAAsB;AAAA,MAARO,MAAQ;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,mBAAL;AACE,+BACKQ,KADL;AACYG,QAAAA,UAAU,EAAEF,MAAM,CAACN;AAD/B;;AAGF,SAAKJ,kBAAL;AACE,+BACKS,KADL;AACYJ,QAAAA,SAAS,EAAEK,MAAM,CAACL;AAD9B;;AAGF,SAAKH,0BAAL;AACE,+BACKO,KADL;AACYH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAD1B;;AAGF;AACE,aAAOG,KAAP;AAdJ;AAgBD;AAGD,IAAMD,OAAO,GAAGT,aAAa,uDAExBE,mBAFwB,EAEF,UAACQ,KAAD,EAAQC,MAAR;AAAA,2BAClBD,KADkB;AACXG,IAAAA,UAAU,EAAEF,MAAM,CAACN;AADR;AAAA,CAFE,mCAKxBJ,kBALwB,EAKH,UAACS,KAAD,EAAQC,MAAR;AAAA,2BACjBD,KADiB;AACVJ,IAAAA,SAAS,EAAEK,MAAM,CAACL;AADR;AAAA,CALG,mCAQxBH,0BARwB,EAQK,UAACO,KAAD,EAAQC,MAAR;AAAA,2BACzBD,KADyB;AAClBH,IAAAA,KAAK,EAAEI,MAAM,CAACJ;AADI;AAAA,CARL,oBAY3BO,QAAQ,EAZmB,CAA7B","sourcesContent":["import { handleActions } from 'redux-actions';\nimport { TICKETS_IS_LOADING, TICKETS_HAS_ERRORED, TICKETS_FETCH_DATA_SUCCESS } from '../actionTypes';\n\nconst initialState = {\n  hasErrored: false,\n  isLoading: false,\n  items: [],\n};\n\nfunction ticketState () {\n  return {\n    hasErrored: false,\n    isLoading: false,\n    items: [],\n  };\n}\n\nexport default function tickets(state = initialState, action) {\n  switch (action.type) {\n    case TICKETS_HAS_ERRORED:\n      return {\n        ...state, hasErrores: action.hasErrored,\n      };\n    case TICKETS_IS_LOADING:\n      return {\n        ...state, isLoading: action.isLoading,\n      };\n    case TICKETS_FETCH_DATA_SUCCESS:\n      return {\n        ...state, items: action.items,\n      };\n    default:\n      return state;\n  }\n}\n\n\nconst tickets = handleActions(\n  {\n    [TICKETS_HAS_ERRORED]: (state, action) => ({\n      ...state, hasErrores: action.hasErrored\n    }),\n    [TICKETS_IS_LOADING]: (state, action) => ({\n      ...state, isLoading: action.isLoading\n    }),\n    [TICKETS_FETCH_DATA_SUCCESS]: (state, action) => ({\n      ...state, items: action.items,\n    }),\n  },\n  airState ()\n);"]},"metadata":{},"sourceType":"module"}