{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport { createElement, createContext, Component } from 'react';\nimport { fieldSubscriptionItems, formSubscriptionItems, createForm, configOptions, version as version$1 } from 'final-form'; //      \n\nfunction diffSubscription(a, b, keys) {\n  if (a) {\n    if (b) {\n      // $FlowFixMe\n      return keys.some(function (key) {\n        return a[key] !== b[key];\n      });\n    } else {\n      return true;\n    }\n  } else {\n    return !!b;\n  }\n} // children render function, or component prop\n\n\nfunction renderComponent(props, name) {\n  var render = props.render,\n      children = props.children,\n      component = props.component,\n      rest = _objectWithoutPropertiesLoose(props, [\"render\", \"children\", \"component\"]);\n\n  if (component) {\n    return createElement(component, _extends({}, rest, {\n      children: children,\n      render: render\n    }));\n  }\n\n  if (render) {\n    return render(_extends({}, rest, {\n      children: children\n    })); // inject children back in\n  }\n\n  if (typeof children !== 'function') {\n    // istanbul ignore next\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\"Warning: Must specify either a render prop, a render function as children, or a component prop to \" + name);\n    }\n\n    return null; // warning will alert developer to their mistake\n  }\n\n  return children(rest);\n} //      \n\n\nvar isReactNative = typeof window !== 'undefined' && window.navigator && window.navigator.product && window.navigator.product === 'ReactNative'; //      \n\nvar getSelectedValues = function getSelectedValues(options) {\n  var result = [];\n\n  if (options) {\n    for (var index = 0; index < options.length; index++) {\n      var option = options[index];\n\n      if (option.selected) {\n        result.push(option.value);\n      }\n    }\n  }\n\n  return result;\n};\n\nvar getValue = function getValue(event, currentValue, valueProp, isReactNative) {\n  if (!isReactNative && event.nativeEvent && event.nativeEvent.text !== undefined) {\n    return event.nativeEvent.text;\n  }\n\n  if (isReactNative && event.nativeEvent) {\n    return event.nativeEvent.text;\n  }\n\n  var detypedEvent = event;\n  var _detypedEvent$target = detypedEvent.target,\n      type = _detypedEvent$target.type,\n      value = _detypedEvent$target.value,\n      checked = _detypedEvent$target.checked;\n\n  switch (type) {\n    case 'checkbox':\n      if (valueProp !== undefined) {\n        // we are maintaining an array, not just a boolean\n        if (checked) {\n          // add value to current array value\n          return Array.isArray(currentValue) ? currentValue.concat(valueProp) : [valueProp];\n        } else {\n          // remove value from current array value\n          if (!Array.isArray(currentValue)) {\n            return currentValue;\n          }\n\n          var index = currentValue.indexOf(valueProp);\n\n          if (index < 0) {\n            return currentValue;\n          } else {\n            return currentValue.slice(0, index).concat(currentValue.slice(index + 1));\n          }\n        }\n      } else {\n        // it's just a boolean\n        return !!checked;\n      }\n\n    case 'select-multiple':\n      return getSelectedValues(event.target.options);\n\n    default:\n      return value;\n  }\n};\n\nvar ReactFinalFormContext = createContext(null);\n\nvar getDisplayName = function getDisplayName(Component) {\n  var displayName = Component.displayName || Component.name || 'Component';\n  return \"ReactFinalForm(\" + displayName + \")\";\n};\n\nvar withReactFinalForm = function withReactFinalForm(Component$1) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(_class, _React$Component);\n\n    function _class() {\n      return _React$Component.apply(this, arguments) || this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.render = function render() {\n      var _this = this;\n\n      return createElement(ReactFinalFormContext.Consumer, {\n        children: function children(reactFinalForm) {\n          return createElement(Component$1, _extends({\n            reactFinalForm: reactFinalForm\n          }, _this.props));\n        }\n      });\n    };\n\n    return _class;\n  }(Component), _class.displayName = getDisplayName(Component$1), _temp;\n};\n\nvar all = fieldSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar Field =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Field, _React$Component);\n\n  function Field(_props) {\n    var _this;\n\n    _this = _React$Component.call(this, _props) || this;\n\n    _this.subscribe = function (_ref, listener) {\n      var defaultValue = _ref.defaultValue,\n          initialValue = _ref.initialValue,\n          isEqual = _ref.isEqual,\n          name = _ref.name,\n          subscription = _ref.subscription,\n          validateFields = _ref.validateFields;\n      _this.unsubscribe = _this.props.reactFinalForm.registerField(name, listener, subscription || all, {\n        defaultValue: defaultValue,\n        getValidator: function getValidator() {\n          return _this.props.validate;\n        },\n        initialValue: initialValue,\n        isEqual: isEqual,\n        validateFields: validateFields\n      });\n    };\n\n    _this.notify = function (state) {\n      return _this.setState({\n        state: state\n      });\n    };\n\n    _this.handlers = {\n      onBlur: function onBlur(event) {\n        var state = _this.state.state; // this is to appease the Flow gods\n        // istanbul ignore next\n\n        if (state) {\n          var _this$props = _this.props,\n              format = _this$props.format,\n              formatOnBlur = _this$props.formatOnBlur;\n          state.blur();\n\n          if (format && formatOnBlur) {\n            state.change(format(state.value, state.name));\n          }\n        }\n      },\n      onChange: function onChange(event) {\n        var _this$props2 = _this.props,\n            parse = _this$props2.parse,\n            _value = _this$props2.value; // istanbul ignore next\n\n        if (process.env.NODE_ENV !== 'production' && event && event.target) {\n          var targetType = event.target.type;\n          var props = _this.props;\n          var unknown = ~['checkbox', 'radio', 'select-multiple'].indexOf(targetType) && !props.type;\n          var type = targetType === 'select-multiple' ? 'select' : targetType;\n\n          var _ref2 = targetType === 'select-multiple' ? _this.state.state || {} : props,\n              _value2 = _ref2.value;\n\n          if (unknown) {\n            console.error(\"Warning: You must pass `type=\\\"\" + type + \"\\\"` prop to your Field(\" + props.name + \") component.\\n\" + (\"Without it we don't know how to unpack your `value` prop - \" + (Array.isArray(_value2) ? \"[\" + _value2 + \"]\" : \"\\\"\" + _value2 + \"\\\"\") + \".\"));\n          }\n        }\n\n        var value = event && event.target ? getValue(event, _this.state.state && _this.state.state.value, _value, isReactNative) : event;\n        _this.state.state && _this.state.state.change(parse ? parse(value, _this.props.name) : value);\n      },\n      onFocus: function onFocus(event) {\n        _this.state.state && _this.state.state.focus();\n      }\n    };\n    var initialState; // istanbul ignore next\n\n    if (process.env.NODE_ENV !== 'production' && !_this.props.reactFinalForm) {\n      console.error('Warning: Field must be used inside of a ReactFinalForm component');\n    }\n\n    if (_this.props.reactFinalForm) {\n      // avoid error, warning will alert developer to their mistake\n      _this.subscribe(_props, function (state) {\n        if (initialState) {\n          _this.notify(state);\n        } else {\n          initialState = state;\n        }\n      });\n    }\n\n    _this.state = {\n      state: initialState\n    };\n    return _this;\n  }\n\n  var _proto = Field.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props3 = this.props,\n        name = _this$props3.name,\n        subscription = _this$props3.subscription;\n\n    if (prevProps.name !== name || diffSubscription(prevProps.subscription, subscription, fieldSubscriptionItems)) {\n      if (this.props.reactFinalForm) {\n        // avoid error, warning will alert developer to their mistake\n        this.unsubscribe();\n        this.subscribe(this.props, this.notify);\n      }\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unsubscribe();\n  };\n\n  _proto.render = function render() {\n    var _this$props4 = this.props,\n        allowNull = _this$props4.allowNull,\n        component = _this$props4.component,\n        children = _this$props4.children,\n        format = _this$props4.format,\n        formatOnBlur = _this$props4.formatOnBlur,\n        parse = _this$props4.parse,\n        isEqual = _this$props4.isEqual,\n        name = _this$props4.name,\n        subscription = _this$props4.subscription,\n        validate = _this$props4.validate,\n        validateFields = _this$props4.validateFields,\n        reactFinalForm = _this$props4.reactFinalForm,\n        _value = _this$props4.value,\n        rest = _objectWithoutPropertiesLoose(_this$props4, [\"allowNull\", \"component\", \"children\", \"format\", \"formatOnBlur\", \"parse\", \"isEqual\", \"name\", \"subscription\", \"validate\", \"validateFields\", \"reactFinalForm\", \"value\"]);\n\n    var _ref3 = this.state.state || {},\n        blur = _ref3.blur,\n        change = _ref3.change,\n        focus = _ref3.focus,\n        value = _ref3.value,\n        ignoreName = _ref3.name,\n        otherState = _objectWithoutPropertiesLoose(_ref3, [\"blur\", \"change\", \"focus\", \"value\", \"name\"]);\n\n    var meta = {\n      // this is to appease the Flow gods\n      active: otherState.active,\n      data: otherState.data,\n      dirty: otherState.dirty,\n      dirtySinceLastSubmit: otherState.dirtySinceLastSubmit,\n      error: otherState.error,\n      initial: otherState.initial,\n      invalid: otherState.invalid,\n      modified: otherState.modified,\n      pristine: otherState.pristine,\n      submitError: otherState.submitError,\n      submitFailed: otherState.submitFailed,\n      submitSucceeded: otherState.submitSucceeded,\n      submitting: otherState.submitting,\n      touched: otherState.touched,\n      valid: otherState.valid,\n      visited: otherState.visited\n    };\n\n    if (formatOnBlur) {\n      value = Field.defaultProps.format(value, name);\n    } else if (format) {\n      value = format(value, name);\n    }\n\n    if (value === null && !allowNull) {\n      value = '';\n    }\n\n    var input = _extends({\n      name: name,\n      value: value\n    }, this.handlers);\n\n    if (rest.type === 'checkbox') {\n      if (_value === undefined) {\n        input.checked = !!value;\n      } else {\n        input.checked = !!(Array.isArray(value) && ~value.indexOf(_value));\n        input.value = _value;\n      }\n    } else if (rest.type === 'radio') {\n      input.checked = value === _value;\n      input.value = _value;\n    } else if (component === 'select' && rest.multiple) {\n      input.value = input.value || [];\n    }\n\n    if (typeof children === 'function') {\n      return children(_extends({\n        input: input,\n        meta: meta\n      }, rest));\n    }\n\n    if (typeof component === 'string') {\n      // ignore meta, combine input with any other props\n      return createElement(component, _extends({}, input, {\n        children: children\n      }, rest));\n    }\n\n    var renderProps = {\n      input: input,\n      meta: meta // assign to force Flow check\n\n    };\n    return renderComponent(_extends({}, renderProps, {\n      children: children,\n      component: component\n    }, rest), \"Field(\" + name + \")\");\n  };\n\n  return Field;\n}(Component);\n\nField.defaultProps = {\n  format: function format(value, name) {\n    return value === undefined ? '' : value;\n  },\n  parse: function parse(value, name) {\n    return value === '' ? undefined : value;\n  }\n};\nvar Field$1 = withReactFinalForm(Field); //      \n\nvar shallowEqual = function shallowEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== 'object' || !a || typeof b !== 'object' || !b) {\n    return false;\n  }\n\n  var keysA = Object.keys(a);\n  var keysB = Object.keys(b);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);\n\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}; //      \n\n\nvar isSyntheticEvent = function isSyntheticEvent(candidate) {\n  return !!(candidate && typeof candidate.stopPropagation === 'function');\n};\n\nvar version = '4.1.0';\nvar versions = {\n  'final-form': version$1,\n  'react-final-form': version\n};\nvar all$1 = formSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar ReactFinalForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ReactFinalForm, _React$Component);\n\n  function ReactFinalForm(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this.notify = function (state) {\n      if (_this.mounted) {\n        _this.setState({\n          state: state\n        });\n      }\n\n      _this.mounted = true;\n    };\n\n    _this.handleSubmit = function (event) {\n      if (event) {\n        // sometimes not true, e.g. React Native\n        if (typeof event.preventDefault === 'function') {\n          event.preventDefault();\n        }\n\n        if (typeof event.stopPropagation === 'function') {\n          // prevent any outer forms from receiving the event too\n          event.stopPropagation();\n        }\n      }\n\n      return _this.form.submit();\n    };\n\n    var children = props.children,\n        component = props.component,\n        render = props.render,\n        subscription = props.subscription,\n        decorators = props.decorators,\n        rest = _objectWithoutPropertiesLoose(props, [\"children\", \"component\", \"render\", \"subscription\", \"decorators\"]);\n\n    var config = rest;\n    _this.mounted = false;\n\n    try {\n      _this.form = createForm(config);\n    } catch (e) {\n      // istanbul ignore next\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(\"Warning: \" + e.message);\n      }\n    }\n\n    _this.unsubscriptions = [];\n\n    if (_this.form) {\n      // set initial state\n      var initialState = {};\n\n      _this.form.subscribe(function (state) {\n        initialState = state;\n      }, subscription || all$1)();\n\n      _this.state = {\n        state: initialState\n      };\n    }\n\n    if (decorators) {\n      decorators.forEach(function (decorator) {\n        _this.unsubscriptions.push(decorator(_this.form));\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = ReactFinalForm.prototype;\n\n  _proto.componentWillMount = function componentWillMount() {\n    if (this.form) {\n      this.form.pauseValidation();\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.form) {\n      this.unsubscriptions.push(this.form.subscribe(this.notify, this.props.subscription || all$1));\n      this.form.resumeValidation();\n    }\n  };\n\n  _proto.componentWillUpdate = function componentWillUpdate() {\n    // istanbul ignore next\n    if (this.form) {\n      this.resumeValidation = this.resumeValidation || !this.form.isValidationPaused();\n      this.form.pauseValidation();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this2 = this; // istanbul ignore next\n\n\n    if (this.form && this.resumeValidation) {\n      this.form.resumeValidation();\n    }\n\n    if (this.props.initialValues && !(this.props.initialValuesEqual || shallowEqual)(prevProps.initialValues, this.props.initialValues)) {\n      this.form.initialize(this.props.initialValues);\n    }\n\n    configOptions.forEach(function (key) {\n      if (key === 'initialValues' || prevProps[key] === _this2.props[key]) {\n        return;\n      }\n\n      _this2.form.setConfig(key, _this2.props[key]);\n    }); // istanbul ignore next\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!shallowEqual(prevProps.decorators, this.props.decorators)) {\n        console.error('Warning: Form decorators should not change from one render to the next as new values will be ignored');\n      }\n\n      if (!shallowEqual(prevProps.subscription, this.props.subscription)) {\n        console.error('Warning: Form subscription should not change from one render to the next as new values will be ignored');\n      }\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unsubscriptions.forEach(function (unsubscribe) {\n      return unsubscribe();\n    });\n  };\n\n  _proto.render = function render() {\n    var _this3 = this; // remove config props\n\n\n    var _this$props = this.props,\n        debug = _this$props.debug,\n        initialValues = _this$props.initialValues,\n        mutators = _this$props.mutators,\n        onSubmit = _this$props.onSubmit,\n        subscription = _this$props.subscription,\n        validate = _this$props.validate,\n        validateOnBlur = _this$props.validateOnBlur,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"debug\", \"initialValues\", \"mutators\", \"onSubmit\", \"subscription\", \"validate\", \"validateOnBlur\"]);\n\n    var renderProps = _extends({}, this.state ? this.state.state : {}, {\n      batch: this.form && function (fn) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.batch() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.batch() instead. Check your ReactFinalForm render prop.\");\n        }\n\n        return _this3.form.batch(fn);\n      },\n      blur: this.form && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.blur() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.blur() instead. Check your ReactFinalForm render prop.\");\n        }\n\n        return _this3.form.blur(name);\n      },\n      change: this.form && function (name, value) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.change() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.change() instead. Check your ReactFinalForm render prop.\");\n        }\n\n        return _this3.form.change(name, value);\n      },\n      focus: this.form && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.focus() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.focus() instead. Check your ReactFinalForm render prop.\");\n        }\n\n        return _this3.form.focus(name);\n      },\n      form: _extends({}, this.form, {\n        reset: function reset(eventOrValues) {\n          if (isSyntheticEvent(eventOrValues)) {\n            // it's a React SyntheticEvent, call reset with no arguments\n            _this3.form.reset();\n          } else {\n            _this3.form.reset(eventOrValues);\n          }\n        }\n      }),\n      handleSubmit: this.handleSubmit,\n      initialize: this.form && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.initialize() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.initialize() instead. Check your ReactFinalForm render prop.\");\n        }\n\n        return _this3.form.initialize(values);\n      },\n      mutators: this.form && Object.keys(this.form.mutators).reduce(function (result, key) {\n        result[key] = function () {\n          var _this3$form$mutators;\n\n          (_this3$form$mutators = _this3.form.mutators)[key].apply(_this3$form$mutators, arguments); // istanbul ignore next\n\n\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\"Warning: As of React Final Form v3.3.0, props.mutators is deprecated and will be removed in the next major version of React Final Form. Use: props.form.mutators instead. Check your ReactFinalForm render prop.\");\n          }\n        };\n\n        return result;\n      }, {}),\n      reset: this.form && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.reset() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.reset() instead. Check your ReactFinalForm render prop.\");\n        }\n\n        return _this3.form.reset(values);\n      }\n    });\n\n    return createElement(ReactFinalFormContext.Provider, {\n      value: this.form\n    }, renderComponent(_extends({}, props, renderProps, {\n      __versions: versions\n    }), 'ReactFinalForm'));\n  };\n\n  return ReactFinalForm;\n}(Component);\n\nvar FormSpy =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(FormSpy, _React$Component);\n\n  function FormSpy(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _this.subscribe = function (_ref, listener) {\n      var subscription = _ref.subscription;\n      _this.unsubscribe = _this.props.reactFinalForm.subscribe(listener, subscription || all$1);\n    };\n\n    _this.notify = function (state) {\n      _this.setState({\n        state: state\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(state);\n      }\n    };\n\n    var initialState; // istanbul ignore next\n\n    if (process.env.NODE_ENV !== 'production' && !_this.props.reactFinalForm) {\n      console.error('Warning: FormSpy must be used inside of a ReactFinalForm component');\n    }\n\n    if (_this.props.reactFinalForm) {\n      // avoid error, warning will alert developer to their mistake\n      _this.subscribe(props, function (state) {\n        if (initialState) {\n          _this.notify(state);\n        } else {\n          initialState = state;\n\n          if (props.onChange) {\n            props.onChange(state);\n          }\n        }\n      });\n    }\n\n    if (initialState) {\n      _this.state = {\n        state: initialState\n      };\n    }\n\n    return _this;\n  }\n\n  var _proto = FormSpy.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var subscription = this.props.subscription;\n\n    if (diffSubscription(prevProps.subscription, subscription, formSubscriptionItems)) {\n      if (this.props.reactFinalForm) {\n        // avoid error, warning will alert developer to their mistake\n        this.unsubscribe();\n        this.subscribe(this.props, this.notify);\n      }\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.unsubscribe();\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        onChange = _this$props.onChange,\n        reactFinalForm = _this$props.reactFinalForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"onChange\", \"reactFinalForm\"]);\n\n    var renderProps = {\n      batch: reactFinalForm && function (fn) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.batch() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.batch() instead. Check your FormSpy render prop.\");\n        }\n\n        return reactFinalForm.batch(fn);\n      },\n      blur: reactFinalForm && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.blur() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.blur() instead. Check your FormSpy render prop.\");\n        }\n\n        return reactFinalForm.blur(name);\n      },\n      change: reactFinalForm && function (name, value) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.change() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.change() instead. Check your FormSpy render prop.\");\n        }\n\n        return reactFinalForm.change(name, value);\n      },\n      focus: reactFinalForm && function (name) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.focus() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.focus() instead. Check your FormSpy render prop.\");\n        }\n\n        return reactFinalForm.focus(name);\n      },\n      form: _extends({}, reactFinalForm, {\n        reset: function reset(eventOrValues) {\n          if (isSyntheticEvent(eventOrValues)) {\n            // it's a React SyntheticEvent, call reset with no arguments\n            reactFinalForm.reset();\n          } else {\n            reactFinalForm.reset(eventOrValues);\n          }\n        }\n      }),\n      initialize: reactFinalForm && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.initialize() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.initialize() instead. Check your FormSpy render prop.\");\n        }\n\n        return reactFinalForm.initialize(values);\n      },\n      mutators: reactFinalForm && Object.keys(reactFinalForm.mutators).reduce(function (result, key) {\n        result[key] = function () {\n          var _reactFinalForm$mutat;\n\n          (_reactFinalForm$mutat = reactFinalForm.mutators)[key].apply(_reactFinalForm$mutat, arguments); // istanbul ignore next\n\n\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\"Warning: As of React Final Form v3.3.0, props.mutators is deprecated and will be removed in the next major version of React Final Form. Use: props.form.mutators instead. Check your FormSpy render prop.\");\n          }\n        };\n\n        return result;\n      }, {}),\n      reset: reactFinalForm && function (values) {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(\"Warning: As of React Final Form v3.3.0, props.reset() is deprecated and will be removed in the next major version of React Final Form. Use: props.form.reset() instead. Check your FormSpy render prop.\");\n        }\n\n        return reactFinalForm.reset(values);\n      }\n    };\n    return onChange ? null : renderComponent(_extends({}, rest, this.state ? this.state.state : {}, renderProps), 'FormSpy');\n  };\n\n  return FormSpy;\n}(Component);\n\nvar FormSpy$1 = withReactFinalForm(FormSpy); //\n\nexport { Field$1 as Field, ReactFinalForm as Form, version, FormSpy$1 as FormSpy, withReactFinalForm, ReactFinalFormContext };","map":null,"metadata":{},"sourceType":"module"}