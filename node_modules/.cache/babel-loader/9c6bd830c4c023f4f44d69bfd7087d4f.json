{"ast":null,"code":"import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _inheritsLoose from '@babel/runtime/helpers/inheritsLoose';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { createElement, Component } from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { fieldSubscriptionItems, version as version$1, ARRAY_ERROR } from 'final-form';\nimport { withReactFinalForm, version as version$2 } from 'react-final-form'; //      \n\nfunction diffSubscription(a, b, keys) {\n  if (a) {\n    if (b) {\n      // $FlowFixMe\n      return keys.some(function (key) {\n        return a[key] !== b[key];\n      });\n    } else {\n      return true;\n    }\n  } else {\n    return !!b;\n  }\n} // children render function, or component prop\n\n\nfunction renderComponent(props, name) {\n  var render = props.render,\n      children = props.children,\n      component = props.component,\n      rest = _objectWithoutPropertiesLoose(props, [\"render\", \"children\", \"component\"]);\n\n  if (component) {\n    return createElement(component, _extends({}, rest, {\n      children: children\n    })); // inject children back in\n  }\n\n  if (render) {\n    return render(_extends({}, rest, {\n      children: children\n    })); // inject children back in\n  } // istanbul ignore next\n\n\n  if (typeof children !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(\"Warning: Must specify either a render prop, a render function as children, or a component prop to \" + name);\n      return null; // warning will alert developer to their mistake\n    }\n  }\n\n  return children(rest);\n}\n\nvar version = '2.0.1';\nvar versions = {\n  'final-form': version$1,\n  'react-final-form': version$2,\n  'react-final-form-arrays': version\n};\nvar all = fieldSubscriptionItems.reduce(function (result, key) {\n  result[key] = true;\n  return result;\n}, {});\n\nvar FieldArray =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(FieldArray, _React$Component);\n\n  function FieldArray(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"isEqual\", function (a, b) {\n      if (typeof _this.props.isEqual === 'function') {\n        return _this.props.isEqual(a, b);\n      }\n\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"subscribe\", function (_ref, listener) {\n      var name = _ref.name,\n          subscription = _ref.subscription;\n      _this.unsubscribe = _this.props.reactFinalForm.registerField(name, listener, subscription ? _extends({}, subscription, {\n        length: true\n      }) : all, {\n        getValidator: function getValidator() {\n          return _this.validate;\n        },\n        isEqual: _this.isEqual\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"validate\", function () {\n      var validate = _this.props.validate;\n      if (!validate) return undefined;\n      var error = validate(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n\n      if (!error || Array.isArray(error)) {\n        return error;\n      } else {\n        var arrayError = [] // gross, but we have to set a string key on the array\n        ;\n        arrayError[ARRAY_ERROR] = error;\n        return arrayError;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"bindMutators\", function (_ref2) {\n      var name = _ref2.name;\n      var reactFinalForm = _this.props.reactFinalForm;\n\n      if (reactFinalForm) {\n        var mutators = reactFinalForm.mutators;\n        var hasMutators = !!(mutators && mutators.push && mutators.pop); // istanbul ignore next\n\n        if (process.env.NODE_ENV !== 'production' && !hasMutators) {\n          console.error('Warning: Array mutators not found. You need to provide the mutators from final-form-arrays to your form');\n        }\n\n        if (hasMutators) {\n          _this.mutators = Object.keys(mutators).reduce(function (result, key) {\n            result[key] = function () {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return mutators[key].apply(mutators, [name].concat(args));\n            };\n\n            return result;\n          }, {});\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"notify\", function (state) {\n      setTimeout(function () {\n        if (_this.mounted) {\n          _this.setState({\n            state: state\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"forEach\", function (iterator) {\n      var name = _this.props.name; // required || for Flow, but results in uncovered line in Jest/Istanbul\n      // istanbul ignore next\n\n      var length = _this.state.state ? _this.state.state.length || 0 : 0;\n\n      for (var i = 0; i < length; i++) {\n        iterator(name + \"[\" + i + \"]\", i);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"map\", function (iterator) {\n      var name = _this.props.name; // required || for Flow, but results in uncovered line in Jest/Istanbul\n      // istanbul ignore next\n\n      var length = _this.state.state ? _this.state.state.length || 0 : 0;\n      var results = [];\n\n      for (var i = 0; i < length; i++) {\n        results.push(iterator(name + \"[\" + i + \"]\", i));\n      }\n\n      return results;\n    });\n\n    var initialState; // istanbul ignore next\n\n    if (process.env.NODE_ENV !== 'production' && !props.reactFinalForm) {\n      console.error('Warning: FieldArray must be used inside of a ReactFinalForm component');\n    }\n\n    var _reactFinalForm = props.reactFinalForm;\n\n    if (_reactFinalForm) {\n      // avoid error, warning will alert developer to their mistake\n      _this.subscribe(props, function (state) {\n        if (initialState) {\n          _this.notify(state);\n        } else {\n          initialState = state;\n        }\n      });\n    }\n\n    _this.state = {\n      state: initialState\n    };\n\n    _this.bindMutators(props);\n\n    _this.mounted = false;\n    return _this;\n  }\n\n  var _proto = FieldArray.prototype;\n\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    var name = nextProps.name,\n        subscription = nextProps.subscription;\n\n    if (this.props.name !== name || diffSubscription(this.props.subscription, subscription, fieldSubscriptionItems)) {\n      if (this.props.reactFinalForm) {\n        // avoid error, warning will alert developer to their mistake\n        this.unsubscribe();\n        this.subscribe(nextProps, this.notify);\n      }\n    }\n\n    if (this.props.name !== name) {\n      this.bindMutators(nextProps);\n    }\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n    this.unsubscribe();\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        name = _this$props.name,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"name\"]);\n\n    var _ref3 = this.state.state || {},\n        length = _ref3.length,\n        active = _ref3.active,\n        dirty = _ref3.dirty,\n        dirtySinceLastSubmit = _ref3.dirtySinceLastSubmit,\n        error = _ref3.error,\n        initial = _ref3.initial,\n        invalid = _ref3.invalid,\n        pristine = _ref3.pristine,\n        submitError = _ref3.submitError,\n        submitFailed = _ref3.submitFailed,\n        submitSucceeded = _ref3.submitSucceeded,\n        touched = _ref3.touched,\n        valid = _ref3.valid,\n        visited = _ref3.visited,\n        fieldStateFunctions = _objectWithoutPropertiesLoose(_ref3, [\"length\", \"active\", \"dirty\", \"dirtySinceLastSubmit\", \"error\", \"initial\", \"invalid\", \"pristine\", \"submitError\", \"submitFailed\", \"submitSucceeded\", \"touched\", \"valid\", \"visited\"]);\n\n    var meta = {\n      active: active,\n      dirty: dirty,\n      dirtySinceLastSubmit: dirtySinceLastSubmit,\n      error: error,\n      initial: initial,\n      invalid: invalid,\n      pristine: pristine,\n      submitError: submitError,\n      submitFailed: submitFailed,\n      submitSucceeded: submitSucceeded,\n      touched: touched,\n      valid: valid,\n      visited: visited\n    };\n\n    var fieldState = _extends({}, meta, fieldStateFunctions);\n\n    return renderComponent(_extends({\n      fields: _extends({\n        name: name,\n        forEach: this.forEach,\n        length: length,\n        map: this.map\n      }, this.mutators, fieldState),\n      meta: meta\n    }, rest, {\n      __versions: versions\n    }), \"FieldArray(\" + name + \")\");\n  };\n\n  return FieldArray;\n}(Component);\n\n_defineProperty(FieldArray, \"displayName\", \"ReactFinalFormFieldArray(\" + version$1 + \")(\" + version + \")\");\n\npolyfill(FieldArray);\nvar decorated = withReactFinalForm < FieldArrayProps > FieldArray; //\n\nexport { decorated as FieldArray, version };","map":null,"metadata":{},"sourceType":"module"}