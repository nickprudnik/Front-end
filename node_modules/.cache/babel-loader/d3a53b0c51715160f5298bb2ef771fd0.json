{"ast":null,"code":"import _defineProperty from \"D:\\\\Front-end\\\\Front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"D:\\\\Front-end\\\\Front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _handleActions;\n\nimport actionTypes from '../actionTypes';\nimport { handleActions } from 'redux-actions';\n\nfunction getInitialState() {\n  return {\n    planeSchema: {},\n    hasErrored: false\n  };\n}\n\n;\nvar plane = handleActions((_handleActions = {}, _defineProperty(_handleActions, actionTypes.GET_PLANE_SCHEMA, function (state, action) {\n  return _objectSpread({}, state, {\n    schema: action.schema\n  });\n}), _defineProperty(_handleActions, actionTypes.PLANE_SCHEMA_HAS_ERRORED, function (state, action) {\n  return _objectSpread({}, state, {\n    hasErrored: action.hasErrored\n  });\n}), _handleActions), getInitialState());\nexport default plane;","map":{"version":3,"sources":["D:\\Front-end\\Front-end\\src\\redux\\data\\plane-schema\\reducers.js"],"names":["actionTypes","handleActions","getInitialState","planeSchema","hasErrored","plane","GET_PLANE_SCHEMA","state","action","schema","PLANE_SCHEMA_HAS_ERRORED"],"mappings":";;;;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,aAAT,QAA8B,eAA9B;;AAEA,SAASC,eAAT,GAA4B;AAC1B,SAAO;AACPC,IAAAA,WAAW,EAAE,EADN;AAEPC,IAAAA,UAAU,EAAE;AAFL,GAAP;AAID;;AAAA;AAED,IAAMC,KAAK,GAAGJ,aAAa,uDAEtBD,WAAW,CAACM,gBAFU,EAES,UAACC,KAAD,EAAQC,MAAR;AAAA,2BAC3BD,KAD2B;AACpBE,IAAAA,MAAM,EAAED,MAAM,CAACC;AADK;AAAA,CAFT,mCAKtBT,WAAW,CAACU,wBALU,EAKiB,UAACH,KAAD,EAAQC,MAAR;AAAA,2BACnCD,KADmC;AAC5BH,IAAAA,UAAU,EAAEI,MAAM,CAACJ;AADS;AAAA,CALjB,oBASzBF,eAAe,EATU,CAA3B;AAYA,eAAeG,KAAf","sourcesContent":["import actionTypes from '../actionTypes';\nimport { handleActions } from 'redux-actions';\n\nfunction getInitialState () {\n  return {\n  planeSchema: {},\n  hasErrored: false,\n  }\n};\n\nconst plane = handleActions(\n  {\n    [actionTypes.GET_PLANE_SCHEMA]: (state, action) => ({\n      ...state, schema: action.schema\n    }),\n    [actionTypes.PLANE_SCHEMA_HAS_ERRORED]: (state, action) => ({\n      ...state, hasErrored: action.hasErrored\n    }),\n  },\n  getInitialState ()\n);\n\nexport default plane;"]},"metadata":{},"sourceType":"module"}